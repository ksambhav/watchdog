buildscript {
    ext {
        kotlinVersion = '1.1.60'
        springBootVersion = '1.5.7.RELEASE'
        projectVersion = '1.0.0-SNAPSHOT'
    }
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath("org.jetbrains.kotlin:kotlin-gradle-plugin:${kotlinVersion}")
        classpath("org.jetbrains.kotlin:kotlin-allopen:${kotlinVersion}")
        classpath 'com.bmuschko:gradle-docker-plugin:3.2.0'
    }
}
plugins {
    id 'net.researchgate.release' version '2.6.0'
}


release {
    failOnUnversionedFiles = false
    failOnCommitNeeded = false
    failOnPublishNeeded = false
    failOnSnapshotDependencies = false

}
apply plugin: 'kotlin'
apply plugin: 'kotlin-spring'
apply plugin: 'application'
mainClassName = 'com.example.watchdog.WatchdogApplicationKt'
apply plugin: 'org.springframework.boot'
apply plugin: 'com.bmuschko.docker-remote-api'

version = projectVersion
sourceCompatibility = 1.8
compileKotlin {
    kotlinOptions.jvmTarget = "1.8"
}
compileTestKotlin {
    kotlinOptions.jvmTarget = "1.8"
}

repositories {
    mavenCentral()
}

dependencies {
    compile('org.springframework.boot:spring-boot-starter-web')
    compile("org.jetbrains.kotlin:kotlin-stdlib-jre8:${kotlinVersion}")
    compile("org.jetbrains.kotlin:kotlin-reflect:${kotlinVersion}")
    testCompile('org.springframework.boot:spring-boot-starter-test')
}

distributions {
    main {
        baseName = "watch"
        version = ""
        contents {
            from('.') {
                include '*.yml'
                into "bin"
            }
        }
    }
}

defaultTasks 'build'

docker {
    if (System.env.containsKey('DOCKER_HOST') && System.env.containsKey('DOCKER_CERT_PATH')) {
        url = System.env.DOCKER_HOST.replace("tcp", "https")
        certPath = new File(System.env.DOCKER_CERT_PATH)
    }
}


import com.bmuschko.gradle.docker.tasks.DockerInfo
import com.bmuschko.gradle.docker.tasks.DockerVersion
import com.bmuschko.gradle.docker.tasks.image.DockerBuildImage
import com.bmuschko.gradle.docker.tasks.image.DockerPushImage

task dockerVersion(type: DockerVersion)
task dockerInfo(type: DockerInfo)


task dbuild(type: DockerBuildImage) {
    dependsOn build
    inputDir = file(".")
    tag "ksambhav/${project.name}:${projectVersion}"
}


task dpush(type: DockerPushImage) {
    imageName "ksambhav/${project.name}:${projectVersion}"
}